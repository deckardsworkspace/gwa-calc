/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { GradesUpdateRequest, HTTPValidationError, TermGradesPydantic } from '../models/index';
import {
  GradesUpdateRequestFromJSON,
  GradesUpdateRequestToJSON,
  HTTPValidationErrorFromJSON,
  HTTPValidationErrorToJSON,
  TermGradesPydanticFromJSON,
  TermGradesPydanticToJSON,
} from '../models/index';

export interface CreateOrReplaceGradesRequest {
  termUuid: string;
  gradesUpdateRequest: GradesUpdateRequest;
}

export interface DeleteGradesRequest {
  uuid: string;
}

export interface RestoreDeletedGradesRequest {
  uuid: string;
}

/**
 *
 */
export class GradesApi extends runtime.BaseAPI {
  /**
   * Create Or Replace Grades
   */
  async createOrReplaceGradesRaw(
    requestParameters: CreateOrReplaceGradesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TermGradesPydantic>> {
    if (requestParameters['termUuid'] == null) {
      throw new runtime.RequiredError(
        'termUuid',
        'Required parameter "termUuid" was null or undefined when calling createOrReplaceGrades().'
      );
    }

    if (requestParameters['gradesUpdateRequest'] == null) {
      throw new runtime.RequiredError(
        'gradesUpdateRequest',
        'Required parameter "gradesUpdateRequest" was null or undefined when calling createOrReplaceGrades().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('HTTPBearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/grades/term/{term_uuid}`.replace(
          `{${'term_uuid'}}`,
          encodeURIComponent(String(requestParameters['termUuid']))
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: GradesUpdateRequestToJSON(requestParameters['gradesUpdateRequest']),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TermGradesPydanticFromJSON(jsonValue)
    );
  }

  /**
   * Create Or Replace Grades
   */
  async createOrReplaceGrades(
    requestParameters: CreateOrReplaceGradesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TermGradesPydantic> {
    const response = await this.createOrReplaceGradesRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Delete Grades
   */
  async deleteGradesRaw(
    requestParameters: DeleteGradesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters['uuid'] == null) {
      throw new runtime.RequiredError(
        'uuid',
        'Required parameter "uuid" was null or undefined when calling deleteGrades().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('HTTPBearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/grades/{uuid}`.replace(
          `{${'uuid'}}`,
          encodeURIComponent(String(requestParameters['uuid']))
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get('content-type'))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Delete Grades
   */
  async deleteGrades(
    requestParameters: DeleteGradesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.deleteGradesRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Restore Deleted Grades
   */
  async restoreDeletedGradesRaw(
    requestParameters: RestoreDeletedGradesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters['uuid'] == null) {
      throw new runtime.RequiredError(
        'uuid',
        'Required parameter "uuid" was null or undefined when calling restoreDeletedGrades().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('HTTPBearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/grades/{uuid}/restore`.replace(
          `{${'uuid'}}`,
          encodeURIComponent(String(requestParameters['uuid']))
        ),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get('content-type'))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Restore Deleted Grades
   */
  async restoreDeletedGrades(
    requestParameters: RestoreDeletedGradesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.restoreDeletedGradesRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
