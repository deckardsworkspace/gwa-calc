/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  TermCreateRequest,
  TermPydantic,
  TermUpdateRequest,
} from '../models/index';
import {
  HTTPValidationErrorFromJSON,
  HTTPValidationErrorToJSON,
  TermCreateRequestFromJSON,
  TermCreateRequestToJSON,
  TermPydanticFromJSON,
  TermPydanticToJSON,
  TermUpdateRequestFromJSON,
  TermUpdateRequestToJSON,
} from '../models/index';

export interface CreateTermRequest {
  termCreateRequest: TermCreateRequest;
}

export interface DeleteTermRequest {
  uuid: string;
}

export interface ReadTermRequest {
  uuid: string;
}

export interface RestoreDeletedTermRequest {
  uuid: string;
}

export interface UpdateTermRequest {
  uuid: string;
  termUpdateRequest: TermUpdateRequest;
}

/**
 *
 */
export class TermApi extends runtime.BaseAPI {
  /**
   * Create Term
   */
  async createTermRaw(
    requestParameters: CreateTermRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TermPydantic>> {
    if (requestParameters['termCreateRequest'] == null) {
      throw new runtime.RequiredError(
        'termCreateRequest',
        'Required parameter "termCreateRequest" was null or undefined when calling createTerm().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('HTTPBearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/term`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: TermCreateRequestToJSON(requestParameters['termCreateRequest']),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => TermPydanticFromJSON(jsonValue));
  }

  /**
   * Create Term
   */
  async createTerm(
    requestParameters: CreateTermRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TermPydantic> {
    const response = await this.createTermRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Delete Term
   */
  async deleteTermRaw(
    requestParameters: DeleteTermRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters['uuid'] == null) {
      throw new runtime.RequiredError(
        'uuid',
        'Required parameter "uuid" was null or undefined when calling deleteTerm().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('HTTPBearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/term/{uuid}`.replace(
          `{${'uuid'}}`,
          encodeURIComponent(String(requestParameters['uuid']))
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get('content-type'))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Delete Term
   */
  async deleteTerm(
    requestParameters: DeleteTermRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.deleteTermRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Read Term
   */
  async readTermRaw(
    requestParameters: ReadTermRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TermPydantic>> {
    if (requestParameters['uuid'] == null) {
      throw new runtime.RequiredError(
        'uuid',
        'Required parameter "uuid" was null or undefined when calling readTerm().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('HTTPBearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/term/{uuid}`.replace(
          `{${'uuid'}}`,
          encodeURIComponent(String(requestParameters['uuid']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => TermPydanticFromJSON(jsonValue));
  }

  /**
   * Read Term
   */
  async readTerm(
    requestParameters: ReadTermRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TermPydantic> {
    const response = await this.readTermRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Restore Deleted Term
   */
  async restoreDeletedTermRaw(
    requestParameters: RestoreDeletedTermRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters['uuid'] == null) {
      throw new runtime.RequiredError(
        'uuid',
        'Required parameter "uuid" was null or undefined when calling restoreDeletedTerm().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('HTTPBearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/term/{uuid}/restore`.replace(
          `{${'uuid'}}`,
          encodeURIComponent(String(requestParameters['uuid']))
        ),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get('content-type'))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Restore Deleted Term
   */
  async restoreDeletedTerm(
    requestParameters: RestoreDeletedTermRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.restoreDeletedTermRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Update Term
   */
  async updateTermRaw(
    requestParameters: UpdateTermRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TermPydantic>> {
    if (requestParameters['uuid'] == null) {
      throw new runtime.RequiredError(
        'uuid',
        'Required parameter "uuid" was null or undefined when calling updateTerm().'
      );
    }

    if (requestParameters['termUpdateRequest'] == null) {
      throw new runtime.RequiredError(
        'termUpdateRequest',
        'Required parameter "termUpdateRequest" was null or undefined when calling updateTerm().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('HTTPBearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/term/{uuid}`.replace(
          `{${'uuid'}}`,
          encodeURIComponent(String(requestParameters['uuid']))
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: TermUpdateRequestToJSON(requestParameters['termUpdateRequest']),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => TermPydanticFromJSON(jsonValue));
  }

  /**
   * Update Term
   */
  async updateTerm(
    requestParameters: UpdateTermRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TermPydantic> {
    const response = await this.updateTermRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
