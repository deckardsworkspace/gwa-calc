/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  CourseCreateRequest,
  CourseMultipleReadRequest,
  CourseMultipleResponse,
  CoursePydantic,
  CourseUpdateRequest,
  HTTPValidationError,
} from '../models/index';
import {
  CourseCreateRequestFromJSON,
  CourseCreateRequestToJSON,
  CourseMultipleReadRequestFromJSON,
  CourseMultipleReadRequestToJSON,
  CourseMultipleResponseFromJSON,
  CourseMultipleResponseToJSON,
  CoursePydanticFromJSON,
  CoursePydanticToJSON,
  CourseUpdateRequestFromJSON,
  CourseUpdateRequestToJSON,
  HTTPValidationErrorFromJSON,
  HTTPValidationErrorToJSON,
} from '../models/index';

export interface CreateCourseRequest {
  courseCreateRequest: CourseCreateRequest;
}

export interface DeleteCourseRequest {
  uuid: string;
}

export interface ReadCourseRequest {
  uuid: string;
}

export interface ReadCoursesRequest {
  courseMultipleReadRequest: CourseMultipleReadRequest;
}

export interface RestoreDeletedCourseRequest {
  uuid: string;
}

export interface UpdateCoursesRequest {
  uuid: string;
  courseUpdateRequest: CourseUpdateRequest;
}

/**
 *
 */
export class CourseApi extends runtime.BaseAPI {
  /**
   * Create Course
   */
  async createCourseRaw(
    requestParameters: CreateCourseRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<CoursePydantic>> {
    if (requestParameters['courseCreateRequest'] == null) {
      throw new runtime.RequiredError(
        'courseCreateRequest',
        'Required parameter "courseCreateRequest" was null or undefined when calling createCourse().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('HTTPBearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/course`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: CourseCreateRequestToJSON(requestParameters['courseCreateRequest']),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => CoursePydanticFromJSON(jsonValue));
  }

  /**
   * Create Course
   */
  async createCourse(
    requestParameters: CreateCourseRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<CoursePydantic> {
    const response = await this.createCourseRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Delete Course
   */
  async deleteCourseRaw(
    requestParameters: DeleteCourseRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters['uuid'] == null) {
      throw new runtime.RequiredError(
        'uuid',
        'Required parameter "uuid" was null or undefined when calling deleteCourse().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('HTTPBearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/course/{uuid}`.replace(
          `{${'uuid'}}`,
          encodeURIComponent(String(requestParameters['uuid']))
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get('content-type'))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Delete Course
   */
  async deleteCourse(
    requestParameters: DeleteCourseRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.deleteCourseRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Read Course
   */
  async readCourseRaw(
    requestParameters: ReadCourseRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<CoursePydantic>> {
    if (requestParameters['uuid'] == null) {
      throw new runtime.RequiredError(
        'uuid',
        'Required parameter "uuid" was null or undefined when calling readCourse().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('HTTPBearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/course/{uuid}`.replace(
          `{${'uuid'}}`,
          encodeURIComponent(String(requestParameters['uuid']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => CoursePydanticFromJSON(jsonValue));
  }

  /**
   * Read Course
   */
  async readCourse(
    requestParameters: ReadCourseRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<CoursePydantic> {
    const response = await this.readCourseRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Read Courses
   */
  async readCoursesRaw(
    requestParameters: ReadCoursesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<CourseMultipleResponse>> {
    if (requestParameters['courseMultipleReadRequest'] == null) {
      throw new runtime.RequiredError(
        'courseMultipleReadRequest',
        'Required parameter "courseMultipleReadRequest" was null or undefined when calling readCourses().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('HTTPBearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/course/multiple`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: CourseMultipleReadRequestToJSON(requestParameters['courseMultipleReadRequest']),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CourseMultipleResponseFromJSON(jsonValue)
    );
  }

  /**
   * Read Courses
   */
  async readCourses(
    requestParameters: ReadCoursesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<CourseMultipleResponse> {
    const response = await this.readCoursesRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Restore Deleted Course
   */
  async restoreDeletedCourseRaw(
    requestParameters: RestoreDeletedCourseRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters['uuid'] == null) {
      throw new runtime.RequiredError(
        'uuid',
        'Required parameter "uuid" was null or undefined when calling restoreDeletedCourse().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('HTTPBearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/course/{uuid}/restore`.replace(
          `{${'uuid'}}`,
          encodeURIComponent(String(requestParameters['uuid']))
        ),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get('content-type'))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Restore Deleted Course
   */
  async restoreDeletedCourse(
    requestParameters: RestoreDeletedCourseRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.restoreDeletedCourseRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Update Courses
   */
  async updateCoursesRaw(
    requestParameters: UpdateCoursesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<CoursePydantic>> {
    if (requestParameters['uuid'] == null) {
      throw new runtime.RequiredError(
        'uuid',
        'Required parameter "uuid" was null or undefined when calling updateCourses().'
      );
    }

    if (requestParameters['courseUpdateRequest'] == null) {
      throw new runtime.RequiredError(
        'courseUpdateRequest',
        'Required parameter "courseUpdateRequest" was null or undefined when calling updateCourses().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('HTTPBearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/course/{uuid}`.replace(
          `{${'uuid'}}`,
          encodeURIComponent(String(requestParameters['uuid']))
        ),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: CourseUpdateRequestToJSON(requestParameters['courseUpdateRequest']),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => CoursePydanticFromJSON(jsonValue));
  }

  /**
   * Update Courses
   */
  async updateCourses(
    requestParameters: UpdateCoursesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<CoursePydantic> {
    const response = await this.updateCoursesRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
